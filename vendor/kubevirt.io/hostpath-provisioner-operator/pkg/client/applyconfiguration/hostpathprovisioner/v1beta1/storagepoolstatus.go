/*
Copyright 2020 The hostpath provisioner operator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "kubevirt.io/hostpath-provisioner-operator/pkg/apis/hostpathprovisioner/v1beta1"
)

// StoragePoolStatusApplyConfiguration represents an declarative configuration of the StoragePoolStatus type for use
// with apply.
type StoragePoolStatusApplyConfiguration struct {
	Name          *string                         `json:"name,omitempty"`
	Phase         *v1beta1.StoragePoolPhase       `json:"phase,omitempty"`
	DesiredReady  *int                            `json:"desiredReady,omitempty"`
	CurrentReady  *int                            `json:"currentReady,omitempty"`
	ClaimStatuses []ClaimStatusApplyConfiguration `json:"claimStatuses,omitempty"`
}

// StoragePoolStatusApplyConfiguration constructs an declarative configuration of the StoragePoolStatus type for use with
// apply.
func StoragePoolStatus() *StoragePoolStatusApplyConfiguration {
	return &StoragePoolStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *StoragePoolStatusApplyConfiguration) WithName(value string) *StoragePoolStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *StoragePoolStatusApplyConfiguration) WithPhase(value v1beta1.StoragePoolPhase) *StoragePoolStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithDesiredReady sets the DesiredReady field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DesiredReady field is set to the value of the last call.
func (b *StoragePoolStatusApplyConfiguration) WithDesiredReady(value int) *StoragePoolStatusApplyConfiguration {
	b.DesiredReady = &value
	return b
}

// WithCurrentReady sets the CurrentReady field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentReady field is set to the value of the last call.
func (b *StoragePoolStatusApplyConfiguration) WithCurrentReady(value int) *StoragePoolStatusApplyConfiguration {
	b.CurrentReady = &value
	return b
}

// WithClaimStatuses adds the given value to the ClaimStatuses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClaimStatuses field.
func (b *StoragePoolStatusApplyConfiguration) WithClaimStatuses(values ...*ClaimStatusApplyConfiguration) *StoragePoolStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithClaimStatuses")
		}
		b.ClaimStatuses = append(b.ClaimStatuses, *values[i])
	}
	return b
}
