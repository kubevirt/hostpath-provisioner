/*
Copyright 2020 The hostpath provisioner operator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/api/core/v1"
)

// HostPathProvisionerSpecApplyConfiguration represents an declarative configuration of the HostPathProvisionerSpec type for use
// with apply.
type HostPathProvisionerSpecApplyConfiguration struct {
	ImagePullPolicy *v1.PullPolicy                   `json:"imagePullPolicy,omitempty"`
	PathConfig      *PathConfigApplyConfiguration    `json:"pathConfig,omitempty"`
	Workload        *NodePlacementApplyConfiguration `json:"workload,omitempty"`
	FeatureGates    []string                         `json:"featureGates,omitempty"`
	StoragePools    []StoragePoolApplyConfiguration  `json:"storagePools,omitempty"`
}

// HostPathProvisionerSpecApplyConfiguration constructs an declarative configuration of the HostPathProvisionerSpec type for use with
// apply.
func HostPathProvisionerSpec() *HostPathProvisionerSpecApplyConfiguration {
	return &HostPathProvisionerSpecApplyConfiguration{}
}

// WithImagePullPolicy sets the ImagePullPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImagePullPolicy field is set to the value of the last call.
func (b *HostPathProvisionerSpecApplyConfiguration) WithImagePullPolicy(value v1.PullPolicy) *HostPathProvisionerSpecApplyConfiguration {
	b.ImagePullPolicy = &value
	return b
}

// WithPathConfig sets the PathConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PathConfig field is set to the value of the last call.
func (b *HostPathProvisionerSpecApplyConfiguration) WithPathConfig(value *PathConfigApplyConfiguration) *HostPathProvisionerSpecApplyConfiguration {
	b.PathConfig = value
	return b
}

// WithWorkload sets the Workload field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workload field is set to the value of the last call.
func (b *HostPathProvisionerSpecApplyConfiguration) WithWorkload(value *NodePlacementApplyConfiguration) *HostPathProvisionerSpecApplyConfiguration {
	b.Workload = value
	return b
}

// WithFeatureGates adds the given value to the FeatureGates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FeatureGates field.
func (b *HostPathProvisionerSpecApplyConfiguration) WithFeatureGates(values ...string) *HostPathProvisionerSpecApplyConfiguration {
	for i := range values {
		b.FeatureGates = append(b.FeatureGates, values[i])
	}
	return b
}

// WithStoragePools adds the given value to the StoragePools field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StoragePools field.
func (b *HostPathProvisionerSpecApplyConfiguration) WithStoragePools(values ...*StoragePoolApplyConfiguration) *HostPathProvisionerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStoragePools")
		}
		b.StoragePools = append(b.StoragePools, *values[i])
	}
	return b
}
